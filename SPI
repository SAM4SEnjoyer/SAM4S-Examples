#include <asf.h>


//pin setting
#define SPI_MISO IOPORT_CREATE_PIN(PIOA, 12)
#define SPI_MOSI IOPORT_CREATE_PIN(PIOA, 13)
#define SPI_SPCK IOPORT_CREATE_PIN(PIOA, 14)
#define SPI_NPCS IOPORT_CREATE_PIN(PIOA, 11)

//Peripheral Chip Select channel (0~3)
#define SPI_CHIP_SEL 0 
//polarity of the clock
#define SPI_CLK_POLARITY 0
//phase of the clock
#define SPI_CLK_PHASE 0
//delay between transfer
#define SPI_DLYBCT 0x10
//delay before clock
#define SPI_DLYBS 0xFF 
//clock setting
#define gs_ul_spi_clock 1000000
//baudrate
#define spi_baudrate 3840000


#define spi_Master SPI
#define BUFFERSIZE 1
void send_spi(uint8_t data);
uint8_t data_buffer[BUFFERSIZE];


struct spi_device device = {
	
	.id = 0
	
};

int main (void)
{
	//clock configuration and initialization
	sysclk_init();
	
	board_init();

	/* Insert application code here, after the board has been initialized. */
	
	//connect peripheral A to pin A11, A12, A13 and A14
	pio_configure_pin(SPI_MISO, PIO_TYPE_PIO_PERIPH_A);
	pio_configure_pin(SPI_MOSI, PIO_TYPE_PIO_PERIPH_A);
	pio_configure_pin(SPI_SPCK, PIO_TYPE_PIO_PERIPH_A);
	pio_configure_pin(SPI_NPCS, PIO_TYPE_PIO_PERIPH_A);
	
	//pull up
	//arch_ioport_set_port_mode(PIOA, SPI_SPCK, IOPORT_MODE_PULLUP);
	//pio_pull_up(PIOA, PIO_DEFAULT, 1);
	
	//enable the peripheral clock for the SPI hardware 
	pmc_enable_periph_clk(ID_SPI);
	
	//clock configuration
	spi_set_clock_polarity(spi_Master, 0, SPI_CLK_POLARITY);
	spi_set_clock_phase(spi_Master, 0, SPI_CLK_PHASE);

	
	spi_master_init(spi_Master);
	
	spi_master_setup_device(spi_Master, &device.id, SPI_MODE_0, spi_baudrate, 0);
	
	spi_enable(spi_Master);
	
	spi_write(SPI, &data_buffer, 0, sizeof(data_buffer));
	
	do{
		//nothing
	}while (1);

}
